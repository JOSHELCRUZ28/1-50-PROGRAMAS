
/*
Autor: [Leon Cruz Jorge Joshel] [22210772]

Código equivalente en C#:
using System;

class Program
{
    static void Main()
    {
        // Ejemplo de entrada
        string[] cadenas = { "flor", "florecer", "florido" };

        string prefijoComún = EncontrarPrefijoComún(cadenas);
        
        if (string.IsNullOrEmpty(prefijoComún))
        {
            Console.WriteLine("No hay prefijo común.");
        }
        else
        {
            Console.WriteLine($"El prefijo común más largo es: {prefijoComún}");
        }
    }

    static string EncontrarPrefijoComún(string[] cadenas)
    {
        if (cadenas == null || cadenas.Length == 0)
            return "";

        // El prefijo común más largo inicialmente es la primera cadena
        string prefijoComún = cadenas[0];

        foreach (var cadena in cadenas)
        {
            // Mientras el prefijo común no sea un prefijo de la cadena actual
            while (!cadena.StartsWith(prefijoComún))
            {
                // Reducir el prefijo común eliminando un carácter de la derecha
                prefijoComún = prefijoComún.Substring(0, prefijoComún.Length - 1);

                // Si no queda ningún prefijo común, se retorna vacío
                if (string.IsNullOrEmpty(prefijoComún))
                    return "";
            }
        }
        return prefijoComún;
    }
}

*/
.data
    str1:           .string "flower"
    str2:           .string "flow"
    prefix:         .skip 100
    msg_str1:       .string "String 1: %s\n"
    msg_str2:       .string "String 2: %s\n"
    msg_prefix:     .string "Prefijo común más largo: %s\n"
.text
.global main
main:
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    // Imprimir strings originales
    adr     x0, msg_str1
    adr     x1, str1
    bl      printf
    adr     x0, msg_str2
    adr     x1, str2
    bl      printf
    // Inicializar variables
    adr     x19, str1          // x19 = dirección str1
    adr     x20, str2          // x20 = dirección str2
    adr     x21, prefix        // x21 = dirección prefix
    mov     x22, #0            // x22 = índice
compare_loop:
    // Cargar caracteres
    ldrb    w23, [x19, x22]    // w23 = str1[i]
    ldrb    w24, [x20, x22]    // w24 = str2[i]
    // Si alguno es nulo o son diferentes, terminar
    cbz     w23, end_prefix
    cbz     w24, end_prefix
    cmp     w23, w24
    bne     end_prefix
    // Guardar carácter en prefix
    strb    w23, [x21, x22]
    add     x22, x22, #1       // i++
    b       compare_loop
end_prefix:
    // Agregar null terminator
    mov     w23, #0
    strb    w23, [x21, x22]
    // Imprimir resultado
    adr     x0, msg_prefix
    mov     x1, x21
    bl      printf
    mov     w0, #0
    ldp     x29, x30, [sp], #16
    ret
