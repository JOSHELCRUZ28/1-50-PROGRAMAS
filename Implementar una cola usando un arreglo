  GNU nano 7.2                                           ProAct38.cpp                                                     #include <iostream>
using namespace std;

class Pila {
private:
    int *arr;        // Puntero al arreglo para almacenar los elementos
    int capacidad;   // Capacidad máxima de la pila
    int cima;        // Índice de la cima de la pila (donde se agregan/eliminan los elementos)

public:
    // Constructor para inicializar la pila
    Pila(int cap) {
        capacidad = cap;
        arr = new int[cap];  // Asignamos memoria para el arreglo de la pila
        cima = -1;  // Inicialmente la pila está vacía
    }

    // Destructor para liberar la memoria asignada
    ~Pila() {
        delete[] arr;
    }

    // Método para agregar un elemento a la pila (push)
    void push(int valor) {
        if (cima == capacidad - 1) {
            cout << "Error: Pila llena, no se puede agregar el elemento " << valor << endl;
        } else {
            cima++;  // Incrementamos el índice de la cima
            arr[cima] = valor;  // Colocamos el nuevo elemento en la cima
            cout << "Elemento " << valor << " agregado a la pila." << endl;
        }
    }

    // Método para eliminar el elemento superior de la pila (pop)
    int pop() {
        if (cima == -1) {
            cout << "Error: Pila vacía, no se puede eliminar ningún elemento." << endl;
            return -1;  // Indicamos error si la pila está vacía
        } else {
            int valor = arr[cima];  // Guardamos el valor a eliminar
            cima--;  // Decrementamos el índice de la cima
            return valor;  // Retornamos el valor eliminado
        }
    }

    // Método para obtener el elemento superior de la pila (peek)
    int peek() {
        if (cima == -1) {
            cout << "Error: Pila vacía." << endl;
            return -1;
        } else {
            return arr[cima];
        }
    }

    // Método para verificar si la pila está vacía
    bool estaVacia() {
        return cima == -1;
    }

    // Método para verificar si la pila está llena
    bool estaLlena() {
        return cima == capacidad - 1;
    }

    // Método para mostrar el contenido de la pila
    void mostrar() {
        if (estaVacia()) {
            cout << "La pila está vacía." << endl;
        } else {
            cout << "Elementos en la pila: ";
            for (int i = cima; i >= 0; i--) {
                cout << arr[i] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    int capacidad;
    cout << "Introduce la capacidad de la pila: ";
    cin >> capacidad;

    Pila pila(capacidad);  // Crear una pila con la capacidad proporcionada

    int opcion, valor;

    do {
        cout << "\nElige una operación:\n";
        cout << "1. Push (agregar un elemento)\n";
        cout << "2. Pop (eliminar el elemento superior)\n";
        cout << "3. Peek (ver el elemento superior)\n";
        cout << "4. Mostrar pila\n";
        cout << "5. Verificar si está vacía\n";
        cout << "6. Verificar si está llena\n";
        cout << "7. Salir\n";
        cout << "Opción: ";
        cin >> opcion;

        switch (opcion) {
            case 1:
                cout << "Introduce el valor a agregar: ";
                cin >> valor;
                pila.push(valor);
                break;

            case 2:
                valor = pila.pop();
                if (valor != -1) {
                    cout << "Elemento eliminado: " << valor << endl;
                }
                break;

            case 3:
                valor = pila.peek();
                if (valor != -1) {
                    cout << "Elemento superior de la pila: " << valor << endl;
                }
                break;
            case 4:
                pila.mostrar();
                break;

            case 5:
                if (pila.estaVacia()) {
                    cout << "La pila está vacía." << endl;
                } else {
                    cout << "La pila no está vacía." << endl;
                }
                break;

            case 6:
                if (pila.estaLlena()) {
                    cout << "La pila está llena." << endl;
                } else {
                    cout << "La pila no está llena." << endl;
                }
                break;

            case 7:
                cout << "Saliendo del programa." << endl;
                break;
            default:
                cout << "Opción no válida." << endl;
        }
    } while (opcion != 7);

    return 0;
}
