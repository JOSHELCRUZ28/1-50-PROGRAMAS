/*
Autor: [Leon Cruz Jorge Joshel] [22210772]
Código equivalente en C#:
using System;

class Program
{
    // Función de búsqueda binaria
    static int BinarySearch(int[] arr, int target)
    {
        int left = 0;
        int right = arr.Length - 1;

        // Mientras el rango de búsqueda sea válido
        while (left <= right)
        {
            int mid = left + (right - left) / 2; // Calcula el índice del medio

            // Verificar si el objetivo está en el medio
            if (arr[mid] == target)
            {
                return mid; // Elemento encontrado, devolver el índice
            }

            // Si el objetivo es mayor que el valor medio, ignorar la mitad izquierda
            if (arr[mid] < target)
            {
                left = mid + 1;
            }
            // Si el objetivo es menor que el valor medio, ignorar la mitad derecha
            else
            {
                right = mid - 1;
            }
        }

        return -1; // Si el valor no fue encontrado, devolver -1
    }

    static void Main()
    {
        // Arreglo ordenado
        int[] arr = { 4, 8, 15, 16, 23, 42 };

        // Solicitar al usuario un número a buscar
        Console.WriteLine("Ingrese el número a buscar:");
        int target = int.Parse(Console.ReadLine());

        // Llamar a la búsqueda binaria
        int result = BinarySearch(arr, target);

        // Mostrar el resultado
        if (result != -1)
        {
            Console.WriteLine($"El valor {target} fue encontrado en el índice {result}.");
   
*/


.data
    array:      .word   4, 8, 15, 16, 23, 42
    size:       .word   6
    buscar:     .word   16
    msg_array:  .string "Arreglo ordenado: "
    msg_num:    .string "%d "
    msg_found:  .string "\nEl elemento %d se encontró en la posición %d\n"
    msg_not:    .string "\nEl elemento %d no se encontró en el arreglo\n"
.text
.global main
main:
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp
    // Imprimir arreglo
    adr     x0, msg_array
    bl      printf
    // Mostrar elementos
    adr     x19, array       // x19 = dirección del array
    adr     x20, size
    ldr     w20, [x20]       // w20 = tamaño
    adr     x21, buscar
    ldr     w21, [x21]       // w21 = valor a buscar
    mov     w22, #0          // w22 = índice
print_loop:
    cmp     w22, w20
    bge     binary_search
    ldr     w1, [x19, w22, SXTW 2]
    adr     x0, msg_num
    bl      printf
    add     w22, w22, #1
    b       print_loop
binary_search:
    mov     w22, #0          // inicio = 0
    sub     w23, w20, #1     // fin = tamaño - 1
search_loop:
    cmp     w22, w23
    bgt     not_found
    // Calcular medio = (inicio + fin) / 2
    add     w24, w22, w23    // w24 = inicio + fin
    lsr     w24, w24, #1     // w24 = (inicio + fin) / 2
    // Cargar elemento del medio
    ldr     w25, [x19, w24, SXTW 2]  // w25 = arr[medio]
    // Comparar con valor buscado
    cmp     w25, w21
    beq     found            // Si son iguales, encontrado
    blt     greater          // Si arr[medio] < buscar, buscar en mitad superior
    
    // Buscar en mitad inferior
    sub     w23, w24, #1     // fin = medio - 1
    b       search_loop
greater:
    add     w22, w24, #1     // inicio = medio + 1
    b       search_loop
found:
    adr     x0, msg_found
    mov     w1, w21          // Valor buscado
    mov     w2, w24          // Posición
    bl      printf
    b       done
not_found:
    adr     x0, msg_not
    mov     w1, w21          // Valor buscado
    bl      printf
done:
    mov     w0, #0
    ldp     x29, x30, [sp], #16
    ret
