  GNU nano 7.2                                          ProAct18.cpp                                                    #include <iostream>
using namespace std;

// Función para fusionar dos subarreglos
void fusionar(int arr[], int izquierda, int derecha, int medio) {
    int n1 = medio - izquierda + 1;  // Tamaño del subarreglo izquierdo
    int n2 = derecha - medio;        // Tamaño del subarreglo derecho

    // Crear arreglos temporales
    int izquierdaArr[n1], derechaArr[n2];

    // Copiar los datos a los arreglos temporales
    for (int i = 0; i < n1; i++) {
        izquierdaArr[i] = arr[izquierda + i];
    }
    for (int i = 0; i < n2; i++) {
        derechaArr[i] = arr[medio + 1 + i];
    }

    // Fusionar los arreglos temporales de vuelta al arreglo original
    int i = 0;    // Índice para el subarreglo izquierdo
    int j = 0;    // Índice para el subarreglo derecho
    int k = izquierda; // Índice para el arreglo original

    while (i < n1 && j < n2) {
        if (izquierdaArr[i] <= derechaArr[j]) {
            arr[k] = izquierdaArr[i];
            i++;
        } else {
            arr[k] = derechaArr[j];
            j++;
        }
        k++;
    }

    // Copiar los elementos restantes del subarreglo izquierdo, si los hay
    while (i < n1) {
        arr[k] = izquierdaArr[i];
        i++;
        k++;
    }

    // Copiar los elementos restantes del subarreglo derecho, si los hay
    while (j < n2) {
        arr[k] = derechaArr[j];
        j++;
        k++;
    }
}

// Función principal de Merge Sort
void mergeSort(int arr[], int izquierda, int derecha) {
    if (izquierda < derecha) {
        // Encontrar el punto medio
        int medio = izquierda + (derecha - izquierda) / 2;

        // Ordenar la primera mitad
        mergeSort(arr, izquierda, medio);

        // Ordenar la segunda mitad
        mergeSort(arr, medio + 1, derecha);

        // Fusionar las dos mitades
        fusionar(arr, izquierda, derecha, medio);
    }
}

// Función para mostrar el arreglo
void mostrarArreglo(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int n;

    // Pedir al usuario la cantidad de elementos en el arreglo
    cout << "Introduce el número de elementos en el arreglo: ";
    cin >> n;

    // Crear el arreglo
    int arr[n];

    // Pedir los elementos del arreglo
    cout << "Introduce los elementos del arreglo: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Mostrar el arreglo original
    cout << "Arreglo original: ";
    mostrarArreglo(arr, n);

    // Llamar a la función de Merge Sort
    mergeSort(arr, 0, n - 1);

    // Mostrar el arreglo ordenado
    cout << "Arreglo ordenado: ";
    mostrarArreglo(arr, n);

    return 0;
}
