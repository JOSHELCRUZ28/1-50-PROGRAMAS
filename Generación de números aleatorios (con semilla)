  GNU nano 7.2                                           ProAct44.cpp                                                     #include <iostream>
#include <random>  // Para generar números aleatorios
#include <ctime>   // Para obtener la hora actual como semilla

using namespace std;

int main() {
    // Usamos el tiempo actual como semilla para que los números aleatorios varíen cada vez que se ejecute el programa
    unsigned seed = static_cast<unsigned>(time(0));

    // Generador de números aleatorios con la semilla proporcionada
    random_device rd; // Este dispositivo nos da una semilla aleatoria basada en hardware (si está disponible)
    mt19937 gen(rd());  // Inicializamos el generador Mersenne Twister con la semilla
    // Alternativamente, podemos usar la semilla del tiempo
    // mt19937 gen(seed); // Descomentar esta línea si se quiere usar el tiempo como semilla

    // Establecer el rango de números aleatorios, por ejemplo de 1 a 100
    uniform_int_distribution<> distrib(1, 100); // Números enteros aleatorios entre 1 y 100

    // Generar 10 números aleatorios
    cout << "10 números aleatorios entre 1 y 100 (con semilla):" << endl;
    for (int i = 0; i < 10; i++) {
        cout << distrib(gen) << " ";  // Generamos un número aleatorio en el rango [1, 100]
    }
    cout << endl;
    // Para generar números de tipo float o double en un rango determinado
    uniform_real_distribution<> distrib_real(1.0, 100.0);  // Números reales aleatorios entre 1.0 y 100.0

    cout << "10 números reales aleatorios entre 1.0 y 100.0 (con semilla):" << endl;
    for (int i = 0; i < 10; i++) {
        cout << distrib_real(gen) << " ";  // Generamos un número real aleatorio
    }
    cout << endl;

    return 0;
}
