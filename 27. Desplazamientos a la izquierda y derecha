
/*
Autor: [Leon Cruz Jorge Joshel] [22210772]

Código equivalente en C#:
using System;

class Program
{
    static void Main()
    {
        // Definir un número entero
        int a = 8;  // En binario: 1000

        // Desplazamiento a la izquierda (<<)
        int resultadoIzquierda = a << 2;  // Desplazar 2 posiciones a la izquierda
        Console.WriteLine($"Resultado de {a} << 2 = {resultadoIzquierda} (en binario: {Convert.ToString(resultadoIzquierda, 2)})");

        // Desplazamiento a la derecha (>>)
        int resultadoDerecha = a >> 2;  // Desplazar 2 posiciones a la derecha
        Console.WriteLine($"Resultado de {a} >> 2 = {resultadoDerecha} (en binario: {Convert.ToString(resultadoDerecha, 2)})");
    }
}
*/
.data
    numero:         .word   8
    msg_orig:       .string "Número original: %d (binario: %s)\n"
    msg_left:       .string "Desplazamiento izquierda <<2: %d (binario: %s)\n"
    msg_right:      .string "Desplazamiento derecha >>1: %d (binario: %s)\n"
    bin_buffer:     .skip   33              // Buffer para string binario

.text
.global main

main:
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp

    // Cargar número
    adr     x19, numero
    ldr     w19, [x19]       // w19 = número

    // Mostrar número original
    mov     w0, w19
    adr     x1, bin_buffer
    bl      to_binary
    adr     x0, msg_orig
    mov     w1, w19
    adr     x2, bin_buffer
    bl      printf

    // Desplazamiento a la izquierda
    lsl     w20, w19, #2     // w20 = número << 2
    mov     w0, w20
    adr     x1, bin_buffer
    bl      to_binary
    adr     x0, msg_left
    mov     w1, w20
    adr     x2, bin_buffer
    bl      printf

    // Desplazamiento a la derecha
    lsr     w20, w19, #1     // w20 = número >> 1
    mov     w0, w20
    adr     x1, bin_buffer
    bl      to_binary
    adr     x0, msg_right
    mov     w1, w20
    adr     x2, bin_buffer
    bl      printf

    mov     w0, #0
    ldp     x29, x30, [sp], #16
    ret

// Función para convertir número a string binario (igual que en el programa anterior)
to_binary:
    mov     w3, #32
    mov     w4, #0
binary_loop:
    sub     w3, w3, #1
    lsr     w5, w0, w3
    and     w5, w5, #1
    add     w5, w5, #48
    strb    w5, [x1, x4]
    add     w4, w4, #1
    cmp     w3, #0
    bne     binary_loop
    mov     w5, #0
    strb    w5, [x1, x4]
    ret
