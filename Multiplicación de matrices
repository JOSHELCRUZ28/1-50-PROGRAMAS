  GNU nano 7.2                                           ProAct20.cpp                                                     #include <iostream>
using namespace std;

void multiplicarMatrices(int** A, int** B, int** C, int filasA, int columnasA, int filasB, int columnasB) {
    // Comprobar si la multiplicación es posible
    if (columnasA != filasB) {
        cout << "Error: las matrices no se pueden multiplicar." << endl;
        return;
    }

    // Inicializar la matriz C a 0
    for (int i = 0; i < filasA; i++) {
        for (int j = 0; j < columnasB; j++) {
            C[i][j] = 0;
        }
    }

    // Realizar la multiplicación de matrices
    for (int i = 0; i < filasA; i++) {
        for (int j = 0; j < columnasB; j++) {
            for (int k = 0; k < columnasA; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}
void mostrarMatriz(int** matriz, int filas, int columnas) {
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            cout << matriz[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int filasA, columnasA, filasB, columnasB;

    // Pedir las dimensiones de las matrices
    cout << "Introduce el número de filas y columnas de la primera matriz (A): ";
    cin >> filasA >> columnasA;
    cout << "Introduce el número de filas y columnas de la segunda matriz (B): ";
    cin >> filasB >> columnasB;

    // Verificar que la multiplicación sea posible
    if (columnasA != filasB) {
        cout << "Error: las matrices no se pueden multiplicar. El número de columnas de A debe ser igual al número de fil>        return 1;  // Salir del programa si no se puede multiplicar
    }
    // Crear las matrices dinámicamente
    int** A = new int*[filasA];
    int** B = new int*[filasB];
    int** C = new int*[filasA];

    for (int i = 0; i < filasA; i++) {
        A[i] = new int[columnasA];
    }
    for (int i = 0; i < filasB; i++) {
        B[i] = new int[columnasB];
    }
    for (int i = 0; i < filasA; i++) {
        C[i] = new int[columnasB];
    }

    // Pedir los elementos de la primera matriz
    cout << "Introduce los elementos de la primera matriz (A):" << endl;
    for (int i = 0; i < filasA; i++) {
        for (int j = 0; j < columnasA; j++) {
            cin >> A[i][j];
        }
    }

    // Pedir los elementos de la segunda matriz
    cout << "Introduce los elementos de la segunda matriz (B):" << endl;
    for (int i = 0; i < filasB; i++) {
        for (int j = 0; j < columnasB; j++) {
            cin >> B[i][j];
        }
    }

    // Llamar a la función para multiplicar las matrices
    multiplicarMatrices(A, B, C, filasA, columnasA, filasB, columnasB);

    // Mostrar el resultado de la multiplicación
    cout << "El resultado de la multiplicación es:" << endl;
    mostrarMatriz(C, filasA, columnasB);

    // Liberar la memoria de las matrices
    for (int i = 0; i < filasA; i++) {
        delete[] A[i];
        delete[] C[i];
    }
    for (int i = 0; i < filasB; i++) {
        delete[] B[i];
    }
    delete[] A;
    delete[] B;
    delete[] C;

    return 0;
}
