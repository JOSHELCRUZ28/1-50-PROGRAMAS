/*
Autor: [Leon Cruz Jorge Joshel] [22210772]
Código equivalente en C#:
using System;

class Program
{
    static int LinearSearch(int[] arr, int target)
    {
        // Recorremos el arreglo
        for (int i = 0; i < arr.Length; i++)
        {
            // Comparamos el valor actual con el valor buscado
            if (arr[i] == target)
            {
                return i; // Si lo encontramos, devolvemos el índice
            }
        }
        return -1; // Si no lo encontramos, devolvemos -1
    }

    static void Main()
    {
        // Definir el arreglo
        int[] arr = { 42, 23, 16, 15, 8, 4 };

        // Valor a buscar
        Console.WriteLine("Ingrese el número a buscar:");
        int target = int.Parse(Console.ReadLine());

        // Llamar a la búsqueda lineal
        int result = LinearSearch(arr, target);

        // Mostrar el resultado
        if (result != -1)
        {
            Console.WriteLine($"El valor {target} fue encontrado en el índice {result}.");
        }
        else
        {
            Console.WriteLine($"El valor {target} no fue encontrado en el arreglo.");
        }
    }
}
*/


.data
    array:      .word   4, 8, 15, 16, 23, 42
    size:       .word   6
    buscar:     .word   16
    msg_array:  .string "Arreglo: "
    msg_num:    .string "%d "
    msg_found:  .string "\nEl elemento %d se encontró en la posición %d\n"
    msg_not:    .string "\nEl elemento %d no se encontró en el arreglo\n"

.text
.global main

main:
    stp     x29, x30, [sp, #-16]!
    mov     x29, sp

    // Imprimir arreglo
    adr     x0, msg_array
    bl      printf

    // Mostrar elementos
    adr     x19, array       // x19 = dirección del array
    adr     x20, size
    ldr     w20, [x20]       // w20 = tamaño
    adr     x21, buscar
    ldr     w21, [x21]       // w21 = valor a buscar
    mov     w22, #0          // w22 = índice

print_loop:
    cmp     w22, w20
    bge     search

    ldr     w1, [x19, w22, SXTW 2]
    adr     x0, msg_num
    bl      printf

    add     w22, w22, #1
    b       print_loop

search:
    mov     w22, #0          // Reset índice

search_loop:
    cmp     w22, w20
    bge     not_found

    ldr     w23, [x19, w22, SXTW 2]
    cmp     w23, w21
    beq     found

    add     w22, w22, #1
    b       search_loop

found:
    adr     x0, msg_found
    mov     w1, w21          // Valor buscado
    mov     w2, w22          // Posición
    bl      printf
    b       done

not_found:
    adr     x0, msg_not
    mov     w1, w21          // Valor buscado
    bl      printf

done:
    mov     w0, #0
    ldp     x29, x30, [sp], #16
    ret
